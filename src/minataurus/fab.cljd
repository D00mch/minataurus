(ns minataurus.fab
  (:require
    ["package:flutter/material.dart" :as m]
    ["dart:math" :refer [pi]]
    [cljd.flutter.alpha :as f]))

(defn- ^m/StatelessWidget build-expandable-button 
  [^double max-distance
   ^double direction-degrees
   ^#/(m/Animation double) progress
   ^m/Widget child]
  (f/widget
    (m/AnimatedBuilder
      :animation progress
      :builder (fn [_ child]
                 (let [offset (.fromDirection 
                                m/Offset
                                (* direction-degrees (/ pi 180.0))
                                (* (.value progress) max-distance))]
                   (f/nest
                     (m/Positioned
                       :right (+ 4.0 (.dx offset))
                       :bottom (+ 4.0 (.dy offset)))
                     (.rotate 
                       m/Transform
                       :angle (* (/ pi 2.0) (- 1.0 (.value progress))))
                     child)))
      :child (m/FadeTransition :opacity progress :child child))))

(defn- widgets->expanding-action-buttons 
  [children 
   ^#/(m/Animation double) expand-animation
   distance]
  (let [step (/ 90.0 (- (count children) 1))]
    (loop [angle-in-degrees 0.0
           children children
           result []]
      (if children
        (recur (+ angle-in-degrees step)
               (next children)
               (conj result 
                     (build-expandable-button
                       distance
                       angle-in-degrees
                       expand-animation
                       (first children))))
        result))))

(defn- build-fab [^m/BuildContext ctx close-hint]
  (let [theme (m.Theme/of ctx)
        opened? @close-hint
        transform-val (if opened? 0.7 1.0)]
    (f/nest
      (m/AnimatedContainer
        :transformAlignment m.Alignment/center
        :transform (.diagonal3Values m/Matrix4 transform-val transform-val 1.0)
        :duration (m/Duration. :milliseconds 250)
        :curve (m/Interval 0.0 0.5 :curve m.Curves/easeOut))
      (m/AnimatedRotation
        :turns (if opened? -0.1 0.0)
        :curve (m/Interval 0.25 1.0 :curve m.Curves/easeInOut)
        :duration (m/Duration. :milliseconds 250))
      (m/FloatingActionButton
        :onPressed (fn [] (swap! close-hint not) nil)
        :backgroundColor (if opened? m.Colors/white m.Colors/white))
      (m/Icon m.Icons/add :color (if opened? (.primaryColor theme) m.Colors/red)))))

(defn fab [distance children]
  (f/widget 
    :ticker tick
    :context ctx
    :inherit [:close-hint]
    :with [controller (m/AnimationController
                        :value 0.0
                        :duration (m/Duration. :milliseconds 250)
                        :vsync tick)
           :dispose comment]
    (let [animation (m/CurvedAnimation
                      :parent controller
                      :curve (m.Curves/fastOutSlowIn)
                      :reverseCurve (m.Curves/easeOutQuad))]
      (if @close-hint
        (.forward controller)
        (.reverse controller))
      (m.SizedBox/expand 
        :child (m/Stack
                 :alignment m.Alignment/bottomRight
                 :clipBehavior m.Clip/none
                 :children (list* (build-fab ctx close-hint)
                                  (widgets->expanding-action-buttons 
                                    children
                                    animation
                                    distance)))))))
