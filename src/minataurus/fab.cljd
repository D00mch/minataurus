(ns minataurus.fab
  (:require
    ["package:flutter/material.dart" :as m]
    ["dart:math" :refer [pi]]
    [cljd.flutter.alpha :as f]))

(defn- ^m/StatelessWidget build-expandable-button 
  [^double max-distance
   ^double direction-degrees
   ^#/(m/Animation double) progress
   ^m/Widget child]
  (f/widget
    (m/AnimatedBuilder.
      :animation progress
      :builder (fn [_ child]
                 (let [offset (.fromDirection 
                                m/Offset
                                (* direction-degrees (/ pi 180.0))
                                (* (.value progress) max-distance))]
                   (f/nest
                     (m/Positioned
                       :right (+ 4.0 (.dx offset))
                       :bottom (+ 4.0 (.dy offset)))
                     (.rotate 
                       m/Transform
                       :angle (* (/ pi 2.0) (- 1.0 (.value progress))))
                     child)))
      :child (m/FadeTransition. :opacity progress :child child))))

(defn- widgets->expanding-action-buttons 
  [^#/(List m/Widget) children 
   ^#/(m/Animation double) expand-animation
   distance]
  (let [step (/ 90.0 (- (count children) 1))]
    (loop [angle-in-degrees 0.0
           children children
           result []]
      (if children
        (recur (+ angle-in-degrees step)
               (next children)
               (conj result 
                     (build-expandable-button
                       distance
                       angle-in-degrees
                       expand-animation
                       (first children))))
        result))))

(defn- build-fab [^m/BuildContext ctx 
                  ^#/(m/ValueNotifier bool) close-hint]
  (let [theme (m.Theme/of ctx)
        opened? (.value close-hint)
        transform-val (if opened? 0.7 1.0)]
    (f/nest
      (m/AnimatedContainer.
        :transformAlignment m.Alignment/center
        :transform (.diagonal3Values m/Matrix4 transform-val transform-val 1.0)
        :duration (m/Duration. :milliseconds 250)
        :curve (m/Interval 0.0 0.5 :curve m.Curves/easeOut))
      (m/AnimatedRotation.
        :turns (if opened? -0.1 0.0)
        :curve (m/Interval 0.25 1.0 :curve m.Curves/easeInOut)
        :duration (m/Duration. :milliseconds 250))
      (m/FloatingActionButton.
        :onPressed (fn [] (set! (.-value close-hint) (not (.value close-hint))) nil)
        :backgroundColor (if opened? m.Colors/white m.Colors/white))
      (m/Icon. m.Icons/add :color (if opened? (.primaryColor theme) m.Colors/red)))))

(defn- toggle [opened? 
               ^m/State state
               ^m/AnimationController controller]
  (.setState state #(do 
                      (swap! opened? not)
                      (if @opened?
                        (.forward controller)
                        (.reverse controller))
                      nil)))

(deftype ExpandableFabState 
  [controller
   animation
   opened?
   listener
   ^double distance
   ^#/(m/ValueNotifier bool) close-hint
   ^#/(List m/Widget) children]

  :extends m/State ^:mixin m/SingleTickerProviderStateMixin 

  (^void initState [this]
    (let [_controller (m/AnimationController.
                       :value 0.0
                       :duration (m/Duration. :milliseconds 250)
                       :vsync this)
          _animation (m/CurvedAnimation.
                       :parent _controller
                       :curve (m.Curves/fastOutSlowIn)
                       :reverseCurve (m.Curves/easeOutQuad))
          _listener (fn [] (toggle opened? this _controller))]
      (reset! controller _controller)
      (reset! animation _animation)
      (reset! listener _listener)
      (.addListener close-hint _listener)))

  (^void dispose [_]
    (when-let [^m/AnimationController? _controller @controller]
      (.dispose _controller))
    (.removeListener close-hint @listener))

  (^m/Widget build [_ ctx]
    (m.SizedBox/expand 
      :child (m/Stack.
               :alignment m.Alignment/bottomRight
               :clipBehavior m.Clip/none
               :children (list* (build-fab ctx close-hint)
                                (widgets->expanding-action-buttons 
                                  children
                                  @animation
                                  distance))))))

(deftype ExpandableFab 
  [^#/(m/ValueNotifier bool) close-hint
   ^double distance
   ^#/(List m/Widget) children]

  :extends m/StatefulWidget

  (^ExpandableFabState createState [_]
    (ExpandableFabState.
        (atom nil)   ; animation-controller
        (atom nil)   ; animation 
        (atom false) ; opened?
        (atom nil)   ; listener
        distance
        close-hint
        children)))
